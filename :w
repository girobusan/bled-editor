import * as UI from "./ui";
import {
    templates
} from "./tools";
//import { curveBundle } from "d3";

const d3 = Object.assign({}, require("d3-selection"));
//UTILITY

export const str2dom = function(s){
let ts = document.createElement("span");
ts.innerHTML = s;
return ts.firstChild;


};


function createMagic(txt){
 return "#!#"; //:REDO
}

//export var constructors = {};
export var blocks = {};

blocks.paragraph = function(){
  function paragraph_editor( data , saver , blockeditor , bbox  ){
    //create editor    
    if(!data ||!data.text){data = {text: "Lorem ipsum"}}

    let myeditor =  str2dom(`<p><span contenteditable='true' >${data.text}</span></p>`) ; 
    let editform = d3.select(myeditor).select("span").node();
    //save data on any changkke
    myeditor.addEventListener("input", ()=>saver(myeditor , {text: editform.innerHTML}));
    saver(myeditor , {text: editform.innerHTML});
    //split on enter
    myeditor.addEventListener("keydown", function (e) {
      var magic = createMagic(myeditor.innerHTML);
      if (e.keyCode == 13) { //Enter key
        if (e.shiftKey) {
          // Do nothing if Shift+Enter
          // Sorry, no <br> for you
        } else {
          let currentSel = document.getSelection();
          if(!currentSel.isCollapsed){
            return ; 
          }
          //node, where caret is
          //console.log(currentSel);
          let clickedNode = currentSel.focusNode;
          let offset = currentSel.focusOffset;
          //console.log("Click at" , clickedNode);
          //insert MAGIC (it's bad, but fast)
          clickedNode.textContent= 
          clickedNode.textContent.substring(0,offset) 
          + magic 
          + clickedNode.textContent.substring(offset)
          ;

          let clickat = editform.innerHTML.indexOf(magic)
          let textleft = editform.innerHTML.substring(0, clickat);
          let textright =  editform.innerHTML.substring(clickat + magic.length);
          //console.log(textleft, "|" , textnext);
          editform.innerHTML = textleft; //blc._p.innerHTML.substring(0 , clickat);

          saver({text: textleft})

          let newpara = blockeditor.addNewBlock("paragraph", {
            text: textright
          }, myeditor);

          //blockeditor.editBlock(newpara);
          e.preventDefault();
          return;
        };
      }
    })
  return myeditor
  };

  return {
    view: function(data){if(!data||!data.text){data = {text: "Lorem ipsum"}};
    console.log("Paragraph view" , data);
    return str2dom(`<p>${data.text}</p>`)  },
    edit: paragraph_editor 
  }
};

blocks.divider = function(){
  return{
    view: function(){return str2dom("<hr>")},
    edit: function(data){if(!data){data = {}}
    return str2dom("<hr>")}
  }
}



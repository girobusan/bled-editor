!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ID2Index	blockeditor.js	/^    this.ID2Index = function (id) {$/;"	c
Index2ID	blockeditor.js	/^    this.Index2ID = function (idx) {$/;"	f
_current_id	blockeditor.js	/^    var _current_id = 0;$/;"	v
_makeID	blockeditor.js	/^    this._makeID = function () {$/;"	f
addButton	ui.js	/^    function addButton(lbl, func, hint) {$/;"	f
addNewBlock	blockeditor.js	/^    this.addNewBlock = function (type, data, refid) { \/\/ref=instert after that block$/;"	c
addNewBlockFromSource	blockeditor.js	/^    this.addNewBlockFromSource = function (d) {$/;"	c
addSmartRemove	coreblocks.js	/^    function addSmartRemove(el) {$/;"	f
blc.save	coreblocks.js	/^    blc.save = function(){$/;"	f
block.addToEditor	tools.js	/^    block.addToEditor = function (e) {$/;"	f
block.addToPreview	tools.js	/^    block.addToPreview = function (e) {$/;"	f
block.addToToolbar	tools.js	/^    block.addToToolbar = function (el) {$/;"	f
block.goEditMode	tools.js	/^    block.goEditMode = function (e) {$/;"	f
block.goPreviewMode	tools.js	/^    block.goPreviewMode = function (e) {$/;"	f
block.isInEditMode	tools.js	/^    block.isInEditMode = function () {$/;"	f
blockByID	blockeditor.js	/^    this.blockByID = function (id) {$/;"	f
blockElementByID	blockeditor.js	/^    this.blockElementByID = function (id) {$/;"	f
blockElementByIndex	blockeditor.js	/^    this.blockElementByIndex = function (idx) {$/;"	f
border.onclick	coreblocks.js	/^    border.onclick = function () {$/;"	f
clinp.addEventListener.save	coreblocks.js	/^    clinp.addEventListener("change" , function(ev){$/;"	f
code	content_render.js	/^    "code": function (block) {$/;"	m	class:const
constructors.attachment	coreblocks.js	/^constructors.attachment = function (data, el, id, editor) {$/;"	f
constructors.audio	coreblocks.js	/^constructors.audio = function (data, el, id, editor) {$/;"	f
constructors.badge	coreblocks.js	/^constructors.badge = function(data, el, id, editor){$/;"	f
constructors.blockquote	coreblocks.js	/^constructors.blockquote = function (data, el, id, editor) {$/;"	f
constructors.code	coreblocks.js	/^constructors.code = function (data, el, id, editor) {$/;"	f
constructors.divider	coreblocks.js	/^constructors.divider = function (data, el, id, editor) {$/;"	f
constructors.header	coreblocks.js	/^constructors.header = function (data, el, id, editor) {$/;"	f
constructors.image	coreblocks.js	/^constructors.image = function (data, el, id, editor) {$/;"	f
constructors.list	coreblocks.js	/^constructors.list = function (data, el, id, editor) {$/;"	f
constructors.markdown	coreblocks.js	/^constructors.markdown = function (data, el, id, editor) {$/;"	f
constructors.paragraph	coreblocks.js	/^constructors.paragraph = function (data, el, id, editor) {$/;"	f
constructors.raw	coreblocks.js	/^constructors.raw = function (data, el, id, editor) {$/;"	f
constructors.video	coreblocks.js	/^constructors.video = function (data, el, id, editor) {$/;"	f
dark	ui.js	/^    "dark": "#00A1AB",$/;"	p	class:export
data	coreblocks.js	/^        data: data ? data : {$/;"	p	class:let
editor	blockeditor.js	/^            "editor": "BlEd\/" + version,$/;"	p	class:let
element	coreblocks.js	/^        element: el,$/;"	p	class:let
export.show	content_render.js	/^export function dumbViewer() {$/;"	f
focusOn	blockeditor.js	/^    this.focusOn = function (id) {$/;"	f
getSymbol	ui.js	/^function getSymbol(posX, posY) {$/;"	f
hide	blockeditor.js	/^    this.hide = function () {$/;"	c
id	coreblocks.js	/^        id: id, \/\/!!!!!!!!!!!!!!!!!!!    $/;"	p	class:let
id	coreblocks.js	/^        id: id,$/;"	p	class:let
left.onclick	coreblocks.js	/^    left.onclick = function () {$/;"	f
light	ui.js	/^    "light": "#3ED9E3",$/;"	p	class:export
list_element	coreblocks.js	/^        list_element: null,$/;"	p	class:let
markdown	content_render.js	/^    "markdown" : function(block){$/;"	m	class:const
md	content_render.js	/^var md = require('markdown-it')({html:true})$/;"	v
moveDown	blockeditor.js	/^    this.moveDown = function (id) {$/;"	f
moveUp	blockeditor.js	/^    this.moveUp = function (id) {$/;"	f
my	coreblocks.js	/^        my: this,$/;"	p	class:let
noresize.onclick	coreblocks.js	/^    noresize.onclick = function () {$/;"	f
pale	ui.js	/^    "pale": "#C4F7FA",$/;"	p	class:export
paragraph	content_render.js	/^    "paragraph": function (block) {$/;"	m	class:const
psrcinput.addEventListener.addToEditor.save	coreblocks.js	/^    psrcinput.addEventListener("keyup", function (e) {$/;"	f
quote	content_render.js	/^    "quote": function (block) {$/;"	m	class:const
raw	content_render.js	/^    "raw" : function(block){$/;"	m	class:const
registerEditor	blockeditor.js	/^    this.registerEditor = function ({$/;"	c
removeBlock	blockeditor.js	/^    this.removeBlock = function (id) {$/;"	c
render	coreblocks.js	/^        render: function () {$/;"	m	class:let
restoreSelection	ui.js	/^function restoreSelection(range) {$/;"	f
right.onclick	coreblocks.js	/^    right.onclick = function () {$/;"	f
save	blockeditor.js	/^            var block = { save: () => data, render: () => null }$/;"	p	class:var.block
save	blockeditor.js	/^    this.save = function (clb) {$/;"	c
save	coreblocks.js	/^        save: function () {$/;"	m	class:let
saveSelection	ui.js	/^function saveSelection() {$/;"	f
setBlocks	blockeditor.js	/^    this.setBlocks = function (blocks) {$/;"	c
setType	coreblocks.js	/^    function setType(tn) {$/;"	f
setUploadFunction	blockeditor.js	/^    this.setUploadFunction = function (func) {$/;"	c
show	blockeditor.js	/^    this.show = function () {$/;"	f
start	blockeditor.js	/^    this.start = function (blocks) {$/;"	c
stretched.onclick	coreblocks.js	/^    stretched.onclick = function () {$/;"	f
templates.addToolbar	tools.js	/^templates.addToolbar = function (block) {$/;"	f
templates.formRow	tools.js	/^templates.formRow = function (elements_array , hint) {$/;"	f
templates.twoPanels	tools.js	/^templates.twoPanels = function (block) {$/;"	f
text	coreblocks.js	/^        text: data && data.text ? data.text : "Header",$/;"	p	class:let
type	coreblocks.js	/^        type: data && data.style && data.style == "ordered" ? "ol" : "ul",$/;"	p	class:let
upload	blockeditor.js	/^    this.upload = function (f, testurl) {$/;"	f
viewmode	presentation.js	/^var viewmode = true;$/;"	v
